package qwert;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.Test;import org.slf4j.*;import java.util.List;import java.util.Objects;import static io.restassured.RestAssured.*;import static org.junit.jupiter.api.Assertions.assertTrue;public class ReqresTestSite {    //спецификации нужны как заготовки для последующего использования библиотеки    private static final Logger logger = LoggerFactory.getLogger(ReqresTestSite.class);    private final static String url = "https://reqres.in";    private final static String BEREKE_URL = "https://business.berekebank.kz/customer/login";    @Test    public void checkAvatarAndId(){        Specification.installSpecification(Specification.requestSpecification(url), Specification.responseSpecificationIndividualStatusCode(200));        List<UserData> users = given()                .when()                .get( "/api/users?page=1")                .then().log().all()                .extract().body().jsonPath()                .getList("data", UserData.class);        users.forEach(x->assertTrue(x.getAvatar().contains(x.getId().toString())));        assertTrue(users.stream().allMatch(x->x.getEmail().endsWith("@reqres.in")));        List<String> avatars = users.stream()                .map(UserData::getAvatar)                .filter(Objects::nonNull) // Фильтруем null-значения                .toList();        List<Integer> ids = users.stream()                .map(UserData::getId)                .filter(Objects::nonNull)                .toList();        for(int i = 0; i < avatars.size(); i++){            Assertions.assertNotNull(avatars.get(i), "Avatar is null at index " + i);            Assertions.assertNotNull(ids.get(i), "ID is null at index " + i);            System.out.println((avatars.get(i).contains(String.valueOf(ids.get(i)))));        }    }//    public static void main(String[] args) {//        Response response = RestAssured//                .given() //— задает параметры запроса (заголовки, параметры, тело).//                .when() //— отправляет HTTP-запрос.//                .get(url); //— выполняет GET-запрос.////        String body = response.getBody().asString();//        String headerValue = response.getHeader("Content-Type");////        System.out.println("Status code: " + response.getStatusCode());//        System.out.println("Response: " + response.getBody().asString());//        System.out.println();//        System.out.println("Header Content-Type: " + headerValue + "\n");////        System.out.println("Body: " + body + "\n");    }//    @Test//    public void checkAvatarAndId(){//        List<UserData> users = given()//                .when()//                .contentType(ContentType.JSON)//                .get(url + "/api/users?page=1")//                .then().log().all()//                .extract().body().jsonPath()//                .getList("data", UserData.class);//        users.stream().forEach(x->assertTrue(x.getAvatar().contains(x.getId().toString())));////        assertTrue(users.stream().allMatch(x->x.getEmail().endsWith("@reqres.in")));//    }