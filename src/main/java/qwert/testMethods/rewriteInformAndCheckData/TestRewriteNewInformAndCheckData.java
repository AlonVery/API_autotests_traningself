package qwert.testMethods.rewriteInformAndCheckData;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.Test;import qwert.Specification;import java.time.Clock;import static io.restassured.RestAssured.given;public class TestRewriteNewInformAndCheckData {    private final static String url = "https://reqres.in/";    @Test    public void testNewUserInformation(){        Specification.installSpecification(Specification.requestSpecification(url), Specification.responseSpecificationIndividualStatusCode(200));        String newNameUser2 = "Aboba";        String anotherUserName = "Aboba 2.0";        String newJobUser2 = "AQA full stack"; //AQA full stack        String anotherJobUser2 = "Si noir Backend Developer";        UpdateUserDataRequest updateUserDataRequest = new UpdateUserDataRequest(newNameUser2, newJobUser2);        UpdateUserDataResponse updateUserDataResponseFirst = given()                .body(updateUserDataRequest)                .when()                .put("/api/users/2")                .then().log().all()                .extract().as(UpdateUserDataResponse.class);        UpdateUserDataRequestSecond updateUserDataRequestSecond = new UpdateUserDataRequestSecond(anotherUserName, anotherJobUser2);        UpdateUserDataResponseSecond updateUserDataResponseSecond = given()                .body(updateUserDataRequestSecond)                .when()                .put("/api/users/2")                .then().log().all()                .extract().as(UpdateUserDataResponseSecond.class);        Assertions.assertNotEquals(                updateUserDataResponseFirst.getName(),                updateUserDataResponseSecond.getName(),                "Ожидалось, что ответы разные, в итоге равны: " + updateUserDataResponseSecond.getName()        );        Assertions.assertNotEquals(                updateUserDataResponseFirst.getJob(),                updateUserDataResponseSecond.getJob(),                "Ожидалось, что ответы разные, в итоге равны: " + updateUserDataResponseSecond.getJob()        );//        String regex = "(.{12})$";//        String currentDateTimeBefore = Clock.systemUTC().instant().toString().replaceAll(regex, " ");//        Assertions.assertEquals(currentDateTimeBefore, updateUserDataResponse.getUpdatedAt().replaceAll(regex, " "));    }}