package qwert;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.Test;import qwert.register.successRegister.SuccessRegistrationPostField;import qwert.register.successRegister.SuccessRegistrationResponseFields;import qwert.register.unsuccessRegister.UnSuccessRegistrationResponseFields;import qwert.register.unsuccessRegister.UnsuccessRegistrationPostFields;import qwert.testFealds.testDataFealds.DataFields;import qwert.testMethods.rewriteInformAndCheckData.UpdateUserDataRequest;import qwert.testMethods.rewriteInformAndCheckData.UpdateUserDataRequestSecond;import qwert.testMethods.rewriteInformAndCheckData.UpdateUserDataResponse;import qwert.testMethods.rewriteInformAndCheckData.UpdateUserDataResponseSecond;import java.time.Clock;import java.util.List;import java.util.Objects;import static io.restassured.RestAssured.given;import static org.junit.jupiter.api.Assertions.assertTrue;public class AllTests {    private final static String url = "https://reqres.in/";    @Test    public void successRegisterTest() {        Specification.installSpecification(Specification.requestSpecification(url), Specification.responseSpecificationIndividualStatusCode(200));        Integer id = 4;        String token = "QpwL5tke4Pnpja7X4";        SuccessRegistrationPostField userEve = new SuccessRegistrationPostField("eve.holt@reqres.in", "pistol");        SuccessRegistrationResponseFields successReg = given()                .body(userEve)                .when()                .post("/api/register")                .then().log().all()                .extract().as(SuccessRegistrationResponseFields.class);        Assertions.assertNotNull(id);        Assertions.assertNotNull(token);        Assertions.assertEquals(id, successReg.getId());        Assertions.assertEquals(token, successReg.getToken());    }    @Test    public void unSuccessTest(){        Specification.installSpecification(Specification.requestSpecification(url), Specification.responseSpecificationIndividualStatusCode(400));        String error = "Missing password";        UnsuccessRegistrationPostFields userWithoutEmail = new UnsuccessRegistrationPostFields("ydney@fife");        UnSuccessRegistrationResponseFields unsuccessReg = given()                .body(userWithoutEmail)                .when()                .post("/api/register")                .then().log().all()                .extract().as(UnSuccessRegistrationResponseFields.class);        Assertions.assertNotNull(error);        Assertions.assertEquals(error, unsuccessReg.getError());    }    @Test    public void checkSortingYear(){        Specification.installSpecification(Specification.requestSpecification(url), Specification.responseSpecificationIndividualStatusCode(200));        // Тут мы записываем из ответа все поля которые записаны в DataFields        List<DataFields> dataFields = given()                .when()                .get("/api/unknown")                .then().log().all()                .extract().body().jsonPath().getList("data", DataFields.class);        // Тут мы выберем все поля years и перенесем в отдельный лист, который уже будем проверять на сортированность        List<Integer> years = dataFields.stream().map(DataFields::getYear).toList(); // получили список годов        List<Integer> sortedYears = years.stream().sorted().toList();                // сортируем года по возрастанию        Assertions.assertEquals(sortedYears, years); // Проверяем, что совпадает ожидаемый результат с реальным результатом        System.out.println(sortedYears); // Ответ отсортирован и какой именно ожидается        System.out.println(years); // какой ответ приходит в реальности    }    @Test    public void  checkAvatarAndId() {        Specification.installSpecification(Specification.requestSpecification(url), Specification.responseSpecificationIndividualStatusCode(200));        List<UserData> users = given()                .when()                .get("/api/users?page=1")                .then().log().all()                .extract().body().jsonPath()                .getList("data", UserData.class);        users.forEach(x -> assertTrue(x.getAvatar().contains(x.getId().toString())));        assertTrue(users.stream().allMatch(x -> x.getEmail().endsWith("@reqres.in")));        List<String> avatars = users.stream()                .map(UserData::getAvatar)                .filter(Objects::nonNull) // Фильтруем null-значения                .toList();        List<Integer> ids = users.stream()                .map(UserData::getId)                .filter(Objects::nonNull)                .toList();        for (int i = 0; i < avatars.size(); i++) {            Assertions.assertNotNull(avatars.get(i), "Avatar is null at index " + i);            Assertions.assertNotNull(ids.get(i), "ID is null at index " + i);            System.out.println((avatars.get(i).contains(String.valueOf(ids.get(i)))));        }    }    @Test    public void deleteUser(){        Specification.installSpecification(Specification.requestSpecification(url), Specification.responseSpecificationIndividualStatusCode(204));        given()                .when()                .delete("/api/users/2")                .then().log().all();    }    @Test    public void testNewUserInformation(){        Specification.installSpecification(Specification.requestSpecification(url), Specification.responseSpecificationIndividualStatusCode(200));        String newNameUser2 = "Aboba";        String anotherUserName = "Aboba 2.0";        String newJobUser2 = "AQA full stack"; //AQA full stack        String anotherJobUser2 = "Si noir Backend Developer";        UpdateUserDataRequest updateUserDataRequest = new UpdateUserDataRequest(newNameUser2, newJobUser2);        UpdateUserDataResponse updateUserDataResponseFirst = given()                .body(updateUserDataRequest)                .when()                .put("/api/users/2")                .then().log().all()                .extract().as(UpdateUserDataResponse.class);        UpdateUserDataRequestSecond updateUserDataRequestSecond = new UpdateUserDataRequestSecond(anotherUserName, anotherJobUser2);        UpdateUserDataResponseSecond updateUserDataResponseSecond = given()                .body(updateUserDataRequestSecond)                .when()                .put("/api/users/2")                .then().log().all()                .extract().as(UpdateUserDataResponseSecond.class);        Assertions.assertNotEquals(                updateUserDataResponseFirst.getName(),                updateUserDataResponseSecond.getName(),                "Ожидалось, что ответы разные, в итоге равны: " + updateUserDataResponseSecond.getName()        );        Assertions.assertNotEquals(                updateUserDataResponseFirst.getJob(),                updateUserDataResponseSecond.getJob(),                "Ожидалось, что ответы разные, в итоге равны: " + updateUserDataResponseSecond.getJob()        );    }}